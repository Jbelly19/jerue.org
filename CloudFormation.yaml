Parameters:
  Owner:
    Type: String
    Default: rjerue
    Description: "Github repository owner"
  Repo:
    Type: String
    Default: jerue.org
    Description: "Github repository name"
  GithubOAuthToken:
    Type: String
    Description: "Github personal access token, https://github.com/settings/tokens"
  Alias:
    Type: String
    Description: Alternate Domain for DNS. Omit the www. Example "jerue.org"
Conditions:
  HasAlias:
    Fn::Not:
      - Fn::Equals:
        - ""
        - !Ref Alias
Resources:
  DeployBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
  Distribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
          Fn::If:
            - HasAlias
            - 
              - !Sub ${Alias}
              - !Sub www.${Alias}
            - AWS::NoValue
        ViewerCertificate:
          Fn::If:
            - HasAlias
            - AcmCertificateArn: !Ref MyCert
              MinimumProtocolVersion: TLSv1.2_2018
              SslSupportMethod: sni-only
            - AWS::NoValue
        Origins:
          - # Use the DeployBucket as the CDN origin
            DomainName: !GetAtt DeployBucket.DomainName
            Id: !Ref DeployBucket
            S3OriginConfig:
              OriginAccessIdentity: ""
        DefaultRootObject: index.html
        Enabled: true
        # Configure the caching behavior for our CDN
        DefaultCacheBehavior:
          MinTTL: 86400 # 1 day
          MaxTTL: 31536000 # 1 year
          ForwardedValues:
            QueryString: true
          TargetOriginId: !Ref DeployBucket
          ViewerProtocolPolicy: "redirect-to-https" # we want to force HTTPS
        HttpVersion: http2
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: Allow
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /service-role/
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                  - "s3:PutObject"
                Resource: 
                  - !GetAtt PipelineBucket.Arn
                  - !Join ['', [!GetAtt PipelineBucket.Arn, "/*"]]
              - 
                Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                Resource: 
                  - !GetAtt DeployBucket.Arn
                  - !Join ['', [!GetAtt DeployBucket.Arn, "/*"]]
              -
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "cloudfront:CreateInvalidation"
                Resource:
                  - "*"
  CodeBuild:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub ${AWS::StackName}-CodeBuild
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        # The downloaded source code for the build will come from CodePipeline
        Type: CODEPIPELINE
        Name: MyProject
      Source: 
        Type: CODEPIPELINE
      Environment:
        # Linux container with node installed
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: "aws/codebuild/nodejs:8.11.0"
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              commands:
                - echo Entered the install phase...
                - apt-get update -y
                - apt-get install apt-transport-https
                # Setup for Yarn
                - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
                - echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
                # Setup for Chrome
                # Do it!
                - apt-get update -y
                - apt-get install -y yarn
            pre_build:
              commands:
                - echo Entered the pre_build phase...
                - yarn install
            build:
              commands:
                - echo Entered the build phase...
                - yarn run build
                - yarn run export
            post_build:
              commands:
                - echo Entered the post_build phase...
                - aws s3 cp --recursive --acl public-read ./out s3://${DeployBucket}/
                - >
                  aws s3 cp --acl public-read 
                  --cache-control="max-age=0, no-cache, no-store, must-revalidate" 
                  ./out/service-worker.js s3://${DeployBucket}/
                - >
                  aws s3 cp --acl public-read 
                  --cache-control="max-age=0, no-cache, no-store, must-revalidate" 
                  ./out/index.html s3://${DeployBucket}/
                - >
                  aws cloudfront create-invalidation --distribution-id ${Distribution} 
                  --paths /index.html /service-worker.js
          artifacts:
            files:
              - "**/*"
            discard-paths: no
            base-directory: out
  # IAM role that allows CodeBuild to interact with S3, CloudWatch, and CloudFront
  # Temp bucket for storing build artifacts
  PipelineBucket:
    Type: "AWS::S3::Bucket"
    Properties: {}
  CodePipeLineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                  - "s3:PutObject"
                Resource:
                  - !GetAtt PipelineBucket.Arn
                  - !Join ["", [!GetAtt PipelineBucket.Arn, "/*"]]
              - Effect: Allow
                Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                Resource: "*"
  CodePipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      RoleArn: !GetAtt CodePipeLineRole.Arn
      ArtifactStore:
        Location: !Ref PipelineBucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: MyApp
              Configuration:
                Owner: !Ref Owner
                Repo: !Ref Repo
                Branch: master
                OAuthToken: !Ref GithubOAuthToken
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: MyApp
              OutputArtifacts:
                - Name: MyAppBuild
              Configuration:
                ProjectName: !Ref CodeBuild
  DNS:
    Condition: HasAlias
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment: !Sub ${Alias} Hosted Zone DNS Config
      Name: !Ref Alias
  ARecord:
    Condition: HasAlias
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNS
      AliasTarget:
        DNSName: !GetAtt Distribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2
      Name: !Ref Alias
      Type: A
  AAAARecord:
    Condition: HasAlias
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNS
      AliasTarget:
        DNSName: !GetAtt Distribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2
      Name: !Ref Alias
      Type: AAAA
  WWWRecord:
    Condition: HasAlias
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNS
      TTL: '300'
      Name: !Sub www.${Alias}
      ResourceRecords:
        - !Ref Alias
      Type: CNAME
  MyCert:
    Condition: HasAlias
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref Alias
      ValidationMethod: DNS
      SubjectAlternativeNames:
        - !Sub www.${Alias}
